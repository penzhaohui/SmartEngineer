//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartEngineer.ServiceClient.JiraService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IssueInfo", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class IssueInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkLog", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class WorkLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubTask", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class SubTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JiraService.IJiraService")]
    public interface IJiraService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetIssuesByLabels", ReplyAction="http://tempuri.org/IJiraService/GetIssuesByLabelsResponse")]
        SmartEngineer.ServiceClient.JiraService.IssueInfo[] GetIssuesByLabels(string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetIssuesByLabels", ReplyAction="http://tempuri.org/IJiraService/GetIssuesByLabelsResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.IssueInfo[]> GetIssuesByLabelsAsync(string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateAssignee", ReplyAction="http://tempuri.org/IJiraService/UpdateAssigneeResponse")]
        bool UpdateAssignee(string jiraKey, string assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateAssignee", ReplyAction="http://tempuri.org/IJiraService/UpdateAssigneeResponse")]
        System.Threading.Tasks.Task<bool> UpdateAssigneeAsync(string jiraKey, string assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateAssigneeQA", ReplyAction="http://tempuri.org/IJiraService/UpdateAssigneeQAResponse")]
        bool UpdateAssigneeQA(string jiraKey, string assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateAssigneeQA", ReplyAction="http://tempuri.org/IJiraService/UpdateAssigneeQAResponse")]
        System.Threading.Tasks.Task<bool> UpdateAssigneeQAAsync(string jiraKey, string assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetUpdatedIssues", ReplyAction="http://tempuri.org/IJiraService/GetUpdatedIssuesResponse")]
        SmartEngineer.ServiceClient.JiraService.IssueInfo[] GetUpdatedIssues(System.DateTime from, System.DateTime to, string[] assignees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetUpdatedIssues", ReplyAction="http://tempuri.org/IJiraService/GetUpdatedIssuesResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.IssueInfo[]> GetUpdatedIssuesAsync(System.DateTime from, System.DateTime to, string[] assignees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetWorkLogs", ReplyAction="http://tempuri.org/IJiraService/GetWorkLogsResponse")]
        SmartEngineer.ServiceClient.JiraService.WorkLog[] GetWorkLogs(string jiraKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetWorkLogs", ReplyAction="http://tempuri.org/IJiraService/GetWorkLogsResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.WorkLog[]> GetWorkLogsAsync(string jiraKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetCaseStudy", ReplyAction="http://tempuri.org/IJiraService/GetCaseStudyResponse")]
        string GetCaseStudy(string jiraKey, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetCaseStudy", ReplyAction="http://tempuri.org/IJiraService/GetCaseStudyResponse")]
        System.Threading.Tasks.Task<string> GetCaseStudyAsync(string jiraKey, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetSubTasks", ReplyAction="http://tempuri.org/IJiraService/GetSubTasksResponse")]
        SmartEngineer.ServiceClient.JiraService.SubTask[] GetSubTasks(string jiraKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/GetSubTasks", ReplyAction="http://tempuri.org/IJiraService/GetSubTasksResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.SubTask[]> GetSubTasksAsync(string jiraKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateSubTasks", ReplyAction="http://tempuri.org/IJiraService/UpdateSubTasksResponse")]
        bool UpdateSubTasks(string jiraKey, SmartEngineer.ServiceClient.JiraService.SubTask subTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/UpdateSubTasks", ReplyAction="http://tempuri.org/IJiraService/UpdateSubTasksResponse")]
        System.Threading.Tasks.Task<bool> UpdateSubTasksAsync(string jiraKey, SmartEngineer.ServiceClient.JiraService.SubTask subTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/CloseSubTasks", ReplyAction="http://tempuri.org/IJiraService/CloseSubTasksResponse")]
        bool CloseSubTasks(string jiraKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJiraService/CloseSubTasks", ReplyAction="http://tempuri.org/IJiraService/CloseSubTasksResponse")]
        System.Threading.Tasks.Task<bool> CloseSubTasksAsync(string jiraKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJiraServiceChannel : SmartEngineer.ServiceClient.JiraService.IJiraService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JiraServiceClient : System.ServiceModel.ClientBase<SmartEngineer.ServiceClient.JiraService.IJiraService>, SmartEngineer.ServiceClient.JiraService.IJiraService {
        
        public JiraServiceClient() {
        }
        
        public JiraServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JiraServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JiraServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JiraServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SmartEngineer.ServiceClient.JiraService.IssueInfo[] GetIssuesByLabels(string[] labels) {
            return base.Channel.GetIssuesByLabels(labels);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.IssueInfo[]> GetIssuesByLabelsAsync(string[] labels) {
            return base.Channel.GetIssuesByLabelsAsync(labels);
        }
        
        public bool UpdateAssignee(string jiraKey, string assignee) {
            return base.Channel.UpdateAssignee(jiraKey, assignee);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAssigneeAsync(string jiraKey, string assignee) {
            return base.Channel.UpdateAssigneeAsync(jiraKey, assignee);
        }
        
        public bool UpdateAssigneeQA(string jiraKey, string assignee) {
            return base.Channel.UpdateAssigneeQA(jiraKey, assignee);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAssigneeQAAsync(string jiraKey, string assignee) {
            return base.Channel.UpdateAssigneeQAAsync(jiraKey, assignee);
        }
        
        public SmartEngineer.ServiceClient.JiraService.IssueInfo[] GetUpdatedIssues(System.DateTime from, System.DateTime to, string[] assignees) {
            return base.Channel.GetUpdatedIssues(from, to, assignees);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.IssueInfo[]> GetUpdatedIssuesAsync(System.DateTime from, System.DateTime to, string[] assignees) {
            return base.Channel.GetUpdatedIssuesAsync(from, to, assignees);
        }
        
        public SmartEngineer.ServiceClient.JiraService.WorkLog[] GetWorkLogs(string jiraKey) {
            return base.Channel.GetWorkLogs(jiraKey);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.WorkLog[]> GetWorkLogsAsync(string jiraKey) {
            return base.Channel.GetWorkLogsAsync(jiraKey);
        }
        
        public string GetCaseStudy(string jiraKey, string options) {
            return base.Channel.GetCaseStudy(jiraKey, options);
        }
        
        public System.Threading.Tasks.Task<string> GetCaseStudyAsync(string jiraKey, string options) {
            return base.Channel.GetCaseStudyAsync(jiraKey, options);
        }
        
        public SmartEngineer.ServiceClient.JiraService.SubTask[] GetSubTasks(string jiraKey) {
            return base.Channel.GetSubTasks(jiraKey);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.JiraService.SubTask[]> GetSubTasksAsync(string jiraKey) {
            return base.Channel.GetSubTasksAsync(jiraKey);
        }
        
        public bool UpdateSubTasks(string jiraKey, SmartEngineer.ServiceClient.JiraService.SubTask subTask) {
            return base.Channel.UpdateSubTasks(jiraKey, subTask);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSubTasksAsync(string jiraKey, SmartEngineer.ServiceClient.JiraService.SubTask subTask) {
            return base.Channel.UpdateSubTasksAsync(jiraKey, subTask);
        }
        
        public bool CloseSubTasks(string jiraKey) {
            return base.Channel.CloseSubTasks(jiraKey);
        }
        
        public System.Threading.Tasks.Task<bool> CloseSubTasksAsync(string jiraKey) {
            return base.Channel.CloseSubTasksAsync(jiraKey);
        }
    }
}
