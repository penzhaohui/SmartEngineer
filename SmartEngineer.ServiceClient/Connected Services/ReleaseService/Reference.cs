//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartEngineer.ServiceClient.ReleaseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IssueInfo", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class IssueInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReleaseService.IReleaseService")]
    public interface IReleaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/SubmitReleaseInfo", ReplyAction="http://tempuri.org/IReleaseService/SubmitReleaseInfoResponse")]
        int SubmitReleaseInfo(SmartEngineer.ServiceClient.ReleaseService.ReleaseInfo releaseInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/SubmitReleaseInfo", ReplyAction="http://tempuri.org/IReleaseService/SubmitReleaseInfoResponse")]
        System.Threading.Tasks.Task<int> SubmitReleaseInfoAsync(SmartEngineer.ServiceClient.ReleaseService.ReleaseInfo releaseInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/GetReleaseInfo", ReplyAction="http://tempuri.org/IReleaseService/GetReleaseInfoResponse")]
        int GetReleaseInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/GetReleaseInfo", ReplyAction="http://tempuri.org/IReleaseService/GetReleaseInfoResponse")]
        System.Threading.Tasks.Task<int> GetReleaseInfoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddJiraFilter", ReplyAction="http://tempuri.org/IReleaseService/AddJiraFilterResponse")]
        bool AddJiraFilter(int id, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddJiraFilter", ReplyAction="http://tempuri.org/IReleaseService/AddJiraFilterResponse")]
        System.Threading.Tasks.Task<bool> AddJiraFilterAsync(int id, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddCodeBanch", ReplyAction="http://tempuri.org/IReleaseService/AddCodeBanchResponse")]
        bool AddCodeBanch(int id, string product, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddCodeBanch", ReplyAction="http://tempuri.org/IReleaseService/AddCodeBanchResponse")]
        System.Threading.Tasks.Task<bool> AddCodeBanchAsync(int id, string product, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddTestRail", ReplyAction="http://tempuri.org/IReleaseService/AddTestRailResponse")]
        bool AddTestRail(int id, string testrun, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/AddTestRail", ReplyAction="http://tempuri.org/IReleaseService/AddTestRailResponse")]
        System.Threading.Tasks.Task<bool> AddTestRailAsync(int id, string testrun, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/GetExistingScopeItems", ReplyAction="http://tempuri.org/IReleaseService/GetExistingScopeItemsResponse")]
        SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] GetExistingScopeItems(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/GetExistingScopeItems", ReplyAction="http://tempuri.org/IReleaseService/GetExistingScopeItemsResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.ReleaseService.IssueInfo[]> GetExistingScopeItemsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/SubmitNewScopeItems", ReplyAction="http://tempuri.org/IReleaseService/SubmitNewScopeItemsResponse")]
        bool SubmitNewScopeItems(string name, SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] items);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReleaseService/SubmitNewScopeItems", ReplyAction="http://tempuri.org/IReleaseService/SubmitNewScopeItemsResponse")]
        System.Threading.Tasks.Task<bool> SubmitNewScopeItemsAsync(string name, SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] items);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReleaseServiceChannel : SmartEngineer.ServiceClient.ReleaseService.IReleaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReleaseServiceClient : System.ServiceModel.ClientBase<SmartEngineer.ServiceClient.ReleaseService.IReleaseService>, SmartEngineer.ServiceClient.ReleaseService.IReleaseService {
        
        public ReleaseServiceClient() {
        }
        
        public ReleaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReleaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReleaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReleaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SubmitReleaseInfo(SmartEngineer.ServiceClient.ReleaseService.ReleaseInfo releaseInfo) {
            return base.Channel.SubmitReleaseInfo(releaseInfo);
        }
        
        public System.Threading.Tasks.Task<int> SubmitReleaseInfoAsync(SmartEngineer.ServiceClient.ReleaseService.ReleaseInfo releaseInfo) {
            return base.Channel.SubmitReleaseInfoAsync(releaseInfo);
        }
        
        public int GetReleaseInfo(int id) {
            return base.Channel.GetReleaseInfo(id);
        }
        
        public System.Threading.Tasks.Task<int> GetReleaseInfoAsync(int id) {
            return base.Channel.GetReleaseInfoAsync(id);
        }
        
        public bool AddJiraFilter(int id, string url) {
            return base.Channel.AddJiraFilter(id, url);
        }
        
        public System.Threading.Tasks.Task<bool> AddJiraFilterAsync(int id, string url) {
            return base.Channel.AddJiraFilterAsync(id, url);
        }
        
        public bool AddCodeBanch(int id, string product, string url) {
            return base.Channel.AddCodeBanch(id, product, url);
        }
        
        public System.Threading.Tasks.Task<bool> AddCodeBanchAsync(int id, string product, string url) {
            return base.Channel.AddCodeBanchAsync(id, product, url);
        }
        
        public bool AddTestRail(int id, string testrun, string url) {
            return base.Channel.AddTestRail(id, testrun, url);
        }
        
        public System.Threading.Tasks.Task<bool> AddTestRailAsync(int id, string testrun, string url) {
            return base.Channel.AddTestRailAsync(id, testrun, url);
        }
        
        public SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] GetExistingScopeItems(int id) {
            return base.Channel.GetExistingScopeItems(id);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.ReleaseService.IssueInfo[]> GetExistingScopeItemsAsync(int id) {
            return base.Channel.GetExistingScopeItemsAsync(id);
        }
        
        public bool SubmitNewScopeItems(string name, SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] items) {
            return base.Channel.SubmitNewScopeItems(name, items);
        }
        
        public System.Threading.Tasks.Task<bool> SubmitNewScopeItemsAsync(string name, SmartEngineer.ServiceClient.ReleaseService.IssueInfo[] items) {
            return base.Channel.SubmitNewScopeItemsAsync(name, items);
        }
    }
}
