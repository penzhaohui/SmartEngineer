//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartEngineer.ServiceClient.DatabaseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBConnection", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class DBConnection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBInfo", Namespace="http://schemas.datacontract.org/2004/07/SmartEngineer.Core.Models")]
    [System.SerializableAttribute()]
    public partial class DBInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseService.IDatabaseService")]
    public interface IDatabaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetDBConnections", ReplyAction="http://tempuri.org/IDatabaseService/GetDBConnectionsResponse")]
        SmartEngineer.ServiceClient.DatabaseService.DBConnection[] GetDBConnections(string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetDBConnections", ReplyAction="http://tempuri.org/IDatabaseService/GetDBConnectionsResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.DatabaseService.DBConnection[]> GetDBConnectionsAsync(string customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/PingDBConnection", ReplyAction="http://tempuri.org/IDatabaseService/PingDBConnectionResponse")]
        bool PingDBConnection(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/PingDBConnection", ReplyAction="http://tempuri.org/IDatabaseService/PingDBConnectionResponse")]
        System.Threading.Tasks.Task<bool> PingDBConnectionAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAAPassword", ReplyAction="http://tempuri.org/IDatabaseService/ResetAAPasswordResponse")]
        bool ResetAAPassword(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAAPassword", ReplyAction="http://tempuri.org/IDatabaseService/ResetAAPasswordResponse")]
        System.Threading.Tasks.Task<bool> ResetAAPasswordAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAASequence", ReplyAction="http://tempuri.org/IDatabaseService/ResetAASequenceResponse")]
        bool ResetAASequence(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAASequence", ReplyAction="http://tempuri.org/IDatabaseService/ResetAASequenceResponse")]
        System.Threading.Tasks.Task<bool> ResetAASequenceAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAAURLs", ReplyAction="http://tempuri.org/IDatabaseService/ResetAAURLsResponse")]
        bool ResetAAURLs(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ResetAAURLs", ReplyAction="http://tempuri.org/IDatabaseService/ResetAAURLsResponse")]
        System.Threading.Tasks.Task<bool> ResetAAURLsAsync(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetDetailedConnectionInfo", ReplyAction="http://tempuri.org/IDatabaseService/GetDetailedConnectionInfoResponse")]
        SmartEngineer.ServiceClient.DatabaseService.DBInfo GetDetailedConnectionInfo(string connectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetDetailedConnectionInfo", ReplyAction="http://tempuri.org/IDatabaseService/GetDetailedConnectionInfoResponse")]
        System.Threading.Tasks.Task<SmartEngineer.ServiceClient.DatabaseService.DBInfo> GetDetailedConnectionInfoAsync(string connectionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseServiceChannel : SmartEngineer.ServiceClient.DatabaseService.IDatabaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<SmartEngineer.ServiceClient.DatabaseService.IDatabaseService>, SmartEngineer.ServiceClient.DatabaseService.IDatabaseService {
        
        public DatabaseServiceClient() {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SmartEngineer.ServiceClient.DatabaseService.DBConnection[] GetDBConnections(string customer) {
            return base.Channel.GetDBConnections(customer);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.DatabaseService.DBConnection[]> GetDBConnectionsAsync(string customer) {
            return base.Channel.GetDBConnectionsAsync(customer);
        }
        
        public bool PingDBConnection(string connectionId) {
            return base.Channel.PingDBConnection(connectionId);
        }
        
        public System.Threading.Tasks.Task<bool> PingDBConnectionAsync(string connectionId) {
            return base.Channel.PingDBConnectionAsync(connectionId);
        }
        
        public bool ResetAAPassword(string connectionId) {
            return base.Channel.ResetAAPassword(connectionId);
        }
        
        public System.Threading.Tasks.Task<bool> ResetAAPasswordAsync(string connectionId) {
            return base.Channel.ResetAAPasswordAsync(connectionId);
        }
        
        public bool ResetAASequence(string connectionId) {
            return base.Channel.ResetAASequence(connectionId);
        }
        
        public System.Threading.Tasks.Task<bool> ResetAASequenceAsync(string connectionId) {
            return base.Channel.ResetAASequenceAsync(connectionId);
        }
        
        public bool ResetAAURLs(string connectionId) {
            return base.Channel.ResetAAURLs(connectionId);
        }
        
        public System.Threading.Tasks.Task<bool> ResetAAURLsAsync(string connectionId) {
            return base.Channel.ResetAAURLsAsync(connectionId);
        }
        
        public SmartEngineer.ServiceClient.DatabaseService.DBInfo GetDetailedConnectionInfo(string connectionId) {
            return base.Channel.GetDetailedConnectionInfo(connectionId);
        }
        
        public System.Threading.Tasks.Task<SmartEngineer.ServiceClient.DatabaseService.DBInfo> GetDetailedConnectionInfoAsync(string connectionId) {
            return base.Channel.GetDetailedConnectionInfoAsync(connectionId);
        }
    }
}
